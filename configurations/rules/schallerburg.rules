import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*


rule Startup
when 
	System started
then
	pushover("OpenHAB wurde gestartet.")
end

rule Goodbye
when 
	System shuts down
then
	pushover("OpenHAB wird beendet.")
end

rule "When text changes, send a push message"
when
        Item push_message_text received update
then
        logInfo('org.openhab', 'message text is: ' + push_message_text.state)
        try {
          callScript('pushMessages')
        } catch (org.openhab.core.scriptengine.ScriptExecutionException e) {
          pushover('Could not send push message: ' + push_message_text.state.toString)
        }
end

rule "Initialize items"
when
        System started
then
    logInfo(    "Initializer", "Started Timer ...")
    createTimer(now.plusSeconds(45)) [|
        logInfo(    "Initializer", "... initializing!")
        InitializeON?.members.filter( x | x.state == Uninitialized).forEach[ item |
          logInfo("Initializer", "... initialize {}", item.name)
          postUpdate(item, ON )
        ]

        InitializeOFF?.members.filter( x | x.state == Uninitialized).forEach[ item |
          logInfo("Initializer", "... initialize {}", item.name)
          postUpdate(item, OFF )
        ]

        InitializeZero?.members.filter( x | x.state == Uninitialized).forEach[ item |
          logInfo("Initializer", "... initialize {}", item.name)
          postUpdate( item, 0)
        ]
    ]
end

