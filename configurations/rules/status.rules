import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
 
rule "Send a status message at 21 if anything is NOT ok"
  when
      Time cron "0 0 21 ? * *"
  then
      // Netzwerk
      if (Network_raspi.state == OFF && !Network_raspi.changedSince(now.minusHours(12))) {
              pushover('Raspi is not responding, and has been off for 12 hours (' + Network_raspi.lastUpdate.toString + ')')
      }
      if (Network_cybmc.state == OFF && !Network_cybmc.changedSince(now.minusHours(12))) {
              pushover('Raspi is not responding, and has been off for 12 hours (' + Network_raspi.lastUpdate.toString + ')')
      }
      if (Network_nas.state == OFF && !Network_nas.changedSince(now.minusHours(12))) {
              pushover('NAS is not responding, and has been off for 12 hours(' + Network_nas.lastUpdate.toString + ')')
      }
      if (Network_mysensorgw.state == OFF && !Network_mysensorgw.changedSince(now.minusHours(12))) {
              pushover('Mysensorsgw is not responding, and has been off for 12 hours(' + Network_mysensorgw.lastUpdate.toString + ')')
      }

      // Mysensors
      Monitoring.allMembers.filter([ !changedSince(now.minusHours(12)) ]).map[
        pushover( name + " has not changed since " + lastUpdate.toString + "." )
      ]
end

Network_Internet
UG_Hannes_Power_Internet

var Timer internetTimer = null
var Timer cycleTimer = null

rule "Reset Internet connection if no change for 5 min"
when
    Item Network_Internet changed or
    Item Network_Router changed to OFF
then
    if (Network_Internet.state == ON) {
	logInfo("Internetswitchrule", "Internet is back again.")
        if (internetTimer!=null) {
            internetTimer.cancel
            internetTimer=null
        }
        // Just to be sure.
        sendCommand(UG_Hannes_Power_Internet,ON)
    } else if (Network_Internet.state==OFF) {
      logInfo("Internetswitchrule", "Internet is [{}]. Checking network.", Network_Internet.state)
      if ((Network_mysensorgw.state == OFF) || (Network_ccu.state == OFF)) {
        logInfo("Internetswitchrule", "Mysensorgw [{}], CCU [{}]. Might be something else.", Network_mysensorgw.state, Network_ccu.state)
      } else if (Network_acedia.state == OFF) {
        logInfo("Internetswitchrule", "acedia is [{}]. We need a powerswitch here :)", Network_acedia.state)
      } else if (Network_Router.state == OFF) {
        logInfo("Internetswitchrule", "Router is [{}] for some reason. I turn it on.", Network_Router.state)
        sendCommand(UG_Hannes_Power_Internet,ON)
      } else {
        logInfo("Internetswitchrule", "Network is OK. Rebooting modem in 5 Minutes.")
        internetTimer = createTimer(now.plusMinutes(5)) [|
          logInfo("Internetswitchrule", "No Internet since 5 Minutes. powercycle modem.")
          sendCommand(UG_Hannes_Power_Internet,OFF)
          cycleTimer = createTimer(now.plusSeconds(5)) [|
            sendCommand(UG_Hannes_Power_Internet,ON)
          ]
        ]
      }
    }
    
end
